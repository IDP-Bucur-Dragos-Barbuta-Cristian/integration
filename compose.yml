services:
  redis:
    image: redis:latest
    container_name: redis_server
    ports:
      - "6379:6379"
    networks:
      - redis
    healthcheck:
      test: "redis-cli ping"
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data

  test-publisher:
    hostname: test-publisher
    image: dragosbucur1105/nn_worker:latest
    environment:
      REDIS_HOST: ${RD_HOST}
      REDIS_PORT: ${RD_PORT}
      REDIS_NAME: ${RD_Q_NAME}
      REDIS_DB: ${RD_DB}
    networks:
      - metrics
      - redis
    depends_on:
      redis:
        condition: service_healthy

  test-service:
    hostname: test-service
    image: dragosbucur1105/testing-docker-hub:latest
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - metrics
      - db

  postgres:
    image: postgres:latest
    hostname: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: pg_isready -d ${DB_NAME} -U ${DB_USER}
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    networks:
      - db

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    networks:
      - db
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy

  prometheus:
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prom_data:/prometheus
      - ./prometheus/:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - metrics
    depends_on:
      - test-publisher
      - test-service

  grafana:
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS}
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    networks:
      - metrics

networks:
  db:
  redis:
  metrics:

volumes:
  db_data:
  redis_data:
  prom_data:
  grafana_data:
