# version: "3.8"

services:
  kong:
    image: kong:latest
    container_name: kong
    networks:
      - kong
      - metrics
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
    command: "kong start"
    volumes:
      - ${CONFIG_ROOT}/kong-config:/opt/kong

  redis:
    image: redis:latest
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    ports:
      - "6379:6379"
    networks:
      - redis
    healthcheck:
      test: "redis-cli ping"
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data

  nn_worker:
    deploy:
      replicas: 3
    image: dragosbucur1105/nn_worker:latest
    environment:
      NN_MODELS_BUCKET: ${NN_MODELS_BUCKET}
      NN_DATASETS_BUCKET: ${NN_DATASETS_BUCKET}
      REDIS_HOST: ${RD_HOST}
      REDIS_PORT: ${RD_PORT}
      QUEUE_NAME: ${RD_Q_NAME}
      REDIS_DB: ${RD_DB}
      CALLBACK_CREATE_URL: http://web_server:${WEB_SERVER_PORT}/callback_create_model
      CALLBACK_TRAIN_URL: http://web_server:${WEB_SERVER_PORT}/callback_train_model
    networks:
      - worker
      - metrics
      - redis
    depends_on:
      - redis

  nn_runner:
    deploy:
      placement:
        constraints: [node.role == worker]
    image: dragosbucur1105/nn_runner:latest
    ports:
      - ${RUNNER_PORT}:${RUNNER_PORT}
    environment:
      API_KEY: ${API_KEY}
      RUNNER_PORT: ${RUNNER_PORT}
    networks:
      - runner
      - kong
      - metrics

  web_server:
    deploy:
      placement:
        constraints: [node.role == manager]
    image: dragosbucur1105/web_server:latest
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET}
      DATABASE_URI: postgresql://${DB_USER}:${DB_USER}@postgres:5432/${DB_NAME}
      NN_MODELS_BUCKET: ${NN_MODELS_BUCKET}
      NN_DATASETS_BUCKET: ${NN_DATASETS_BUCKET}
      API_KEY_FOR_LOADING_MODELS_SERVICE: ${API_KEY}
      LOADING_MODELS_SERVICE_URL: http://nn_runner:${RUNNER_PORT}
      RD_HOST: ${RD_HOST}
      RD_PORT: ${RD_PORT}
      RD_Q_NAME: ${RD_Q_NAME}
      PORT: ${WEB_SERVER_PORT}
    ports:
      - ${WEB_SERVER_PORT}:${WEB_SERVER_PORT}
    depends_on:
      - nn_worker
      - nn_runner
    networks:
      - redis
      - runner
      - worker
      - kong
      - db



  # test-service:
  #   deploy:
  #     replicas: 3
  #   hostname: test-service
  #   image: dragosbucur1105/testing-docker-hub:latest
  #   environment:
  #     DB_HOST: ${DB_HOST}
  #     DB_USER: ${DB_USER}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     DB_NAME: ${DB_NAME}
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - metrics
  #     - kong
  #     - db

  postgres:
    image: postgres:latest
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    hostname: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: pg_isready -d ${DB_NAME} -U ${DB_USER}
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - db

  pgadmin:
    image: dpage/pgadmin4
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    networks:
      - db
    ports:
      - "8080:80"
    depends_on:
      - postgres

  prometheus:
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prom_data:/prometheus
      - ${CONFIG_ROOT}/prometheus/:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - metrics
    depends_on:
      - nn_worker
      - nn_runner
      - web_server

  grafana:
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS}
    volumes:
      - ${CONFIG_ROOT}/grafana:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    networks:
      - metrics

networks:
  db:
  redis:
  metrics:
  kong:
  runner:
  worker:

volumes:
  db_data:
  redis_data:
  prom_data:
  grafana_data:
  web_server_data:
